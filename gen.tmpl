{{- /*gotype: github.com/x5iu/visc.Context*/ -}}
// +build visc

package main

import (
"bytes"
"fmt"
"go/format"
"io"
"os"
"path"
"reflect"
"sort"
"strconv"
"strings"

target "{{ $.Package.Path }}"
)

const Program = "visc"

type Generator struct {
out bytes.Buffer
pkg struct {
name string
path string
tags string
}
imports map[string]string
types   map[reflect.Type]bool
}

func (g *Generator) Code() []byte {
var code bytes.Buffer
types := make([]reflect.Type, 0, len(g.types))
for t := range g.types {
types = append(types, t)
}
sort.Slice(types, func(i, j int) bool {
return types[i].String() < types[j].String()
})
for _, t := range types {
receiver := g.getType(t)
for i := 0; i < t.NumField(); i++ {
f := t.Field(i)
getter, hasGetter, isRef, setter, hasSetter := inspectField(f)
if hasGetter && !implements(t, getter) {
g.genGetter(receiver, getter, f, isRef)
}
if hasSetter && !implements(t, setter) {
g.genSetter(receiver, setter, f)
}
getterProxyMap, setterProxyMap := inspectProxy(f)
if getterProxyMap != nil || setterProxyMap != nil {
ft := f.Type
if ft.Kind() == reflect.Ptr {
ft = ft.Elem()
}
if ft.Kind() == reflect.Struct {
for _, pf := range getMergedFields(ft) {
if getterProxyMap != nil {
if method, ok := getterProxyMap[pf.Name]; ok && !implements(t, method) {
g.genProxyGetter(receiver, method, f.Name, pf, false)
} else if method, ok = getterProxyMap["*"+pf.Name]; ok && !implements(t, method) {
g.genProxyGetter(receiver, method, f.Name, pf, true)
}
}
if setterProxyMap != nil {
if method, ok := setterProxyMap[pf.Name]; ok && !implements(t, method) {
g.genProxySetter(receiver, method, f.Name, pf)
}
}
}
}
}
}
}
if tags := g.pkg.tags; tags != "" {
// code below would be added automatically by go/format
// fmt.Fprintf(&code, "//go:build %s\n", tags)
fmt.Fprintf(&code, "// +build %s\n\n", tags)
}
fmt.Fprintf(&code, "// Code generated by %s, DO NOT EDIT.\n\n", Program)
fmt.Fprintf(&code, "package %s\n\n", g.pkg.name)
if len(g.imports) > 0 {
pkgs := make([]string, 0, len(g.imports))
for pkg := range g.imports {
pkgs = append(pkgs, pkg)
}
sort.Strings(pkgs)
fmt.Fprintf(&code, "import (\n")
for _, pkg := range pkgs {
fmt.Fprintf(&code, "%s %q\n", g.imports[pkg], pkg)
}
fmt.Fprintf(&code, ")\n\n")
}
io.Copy(&code, &g.out)
return code.Bytes()
}

func (g *Generator) SetPackage(name string, path string) {
g.pkg.name = name
g.pkg.path = path
}

func (g *Generator) SetTags(tags string) {
g.pkg.tags = tags
}

func (g *Generator) AddType(instance any) {
t := reflect.TypeOf(instance)
if t.Kind() == reflect.Ptr {
t = t.Elem()
}
if t.Kind() == reflect.Struct {
g.types[t] = true
}
}

func (g *Generator) getType(t reflect.Type) string {
if t.Name() == "" {
switch t.Kind() {
case reflect.Ptr:
return "*" + g.getType(t.Elem())
case reflect.Slice:
return "[]" + g.getType(t.Elem())
case reflect.Array:
return "[" + strconv.Itoa(t.Len()) + "]" + g.getType(t.Elem())
case reflect.Map:
return "map[" + g.getType(t.Key()) + "]" + g.getType(t.Elem())
}
}

// t.PkgPath() is empty means t.Name() is empty either
// see:
//   $GOROOT/src/reflect/type.go:82
//   $GOROOT/src/reflect/type.go:89
if t.PkgPath() == "" {
// the fields of an anonymous struct can have named types,
// and t.String() will not be sufficient because it does not
// remove the package name when it matches g.pkgPath.
// so we convert by hand
//
// var Anonymous struct {
//    Field sql.NullString
//        ^^^
// }
if t.Kind() == reflect.Struct {
nf := t.NumField()
lines := make([]string, 0, nf)
for i := 0; i < nf; i++ {
f := t.Field(i)
var line string
if !f.Anonymous {
line = f.Name + " "
} // else the field is anonymous (an embedded type)
line += g.getType(f.Type)
if tag := f.Tag; tag != "" {
line += " " + escapeTag(tag)
}
lines = append(lines, line)
}
return "struct { " + strings.Join(lines, "; ") + " }"
}
return t.String()
} else if t.PkgPath() == g.pkg.path || t.PkgPath() == "main" {
return g.fixGeneric(t.Name())
}

return g.getPackage(t.PkgPath()) + "." + g.fixGeneric(t.Name())
}

// HACK
// handle generic type
func (g *Generator) fixGeneric(name string) string {
getPoint := func(s string) int {
if guard := strings.Index(s, "["); guard >= 0 {
return strings.LastIndex(s[:guard], ".")
} else {
return strings.LastIndex(s, ".")
}
}

if strings.HasSuffix(name, "]") {
if start := strings.Index(name, "["); start >= 0 {
generics := splitTypes(name[start+1 : len(name)-1])
fixed := make([]string, 0, len(generics))
for _, generic := range generics {
if point := getPoint(generic); point >= 0 {
var star string
pkg, typ := generic[:point], generic[point+1:]
if strings.HasPrefix(generic, "*") {
star = "*"
pkg = strings.TrimPrefix(pkg, star)
}
if pkg == g.pkg.path || pkg == "main" {
fixed = append(fixed, star+g.fixGeneric(typ))
} else {
fixed = append(fixed, star+g.getPackage(pkg)+"."+g.fixGeneric(typ))
}
} else {
fixed = append(fixed, g.fixGeneric(generic))
}
}
return name[:start] + "[" + strings.Join(fixed, ", ") + "]"
}
}
return name
}

func splitTypes(generics string) (args []string) {
generics = strings.TrimSpace(generics)
if len(generics) == 0 {
return nil
}

var (
bracketStack int
doubleQuoted bool
singleQuoted bool
backQuoted   bool
arg          []byte
)

for i := 0; i < len(generics); i++ {
switch ch := generics[i]; ch {
case ',':
if doubleQuoted || singleQuoted || backQuoted ||
bracketStack > 0 {
arg = append(arg, ch)
} else if len(arg) > 0 {
args = append(args, string(arg))
arg = arg[:0]
}
case '"':
if (i > 0 && generics[i-1] == '\\') || singleQuoted || backQuoted {
arg = append(arg, ch)
} else {
doubleQuoted = !doubleQuoted
arg = append(arg, ch)
}
case '\'':
if (i > 0 && generics[i-1] == '\\') || doubleQuoted || backQuoted {
arg = append(arg, ch)
} else {
singleQuoted = !singleQuoted
arg = append(arg, ch)
}
case '`':
if (i > 0 && generics[i-1] == '\\') || doubleQuoted || singleQuoted {
arg = append(arg, ch)
} else {
backQuoted = !backQuoted
arg = append(arg, ch)
}
case '[':
if !(doubleQuoted || singleQuoted || backQuoted) {
bracketStack++
}
arg = append(arg, ch)
case ']':
if !(doubleQuoted || singleQuoted || backQuoted) {
bracketStack--
}
arg = append(arg, ch)
default:
arg = append(arg, ch)
}
}

if len(arg) > 0 {
args = append(args, string(arg))
}

return args
}

func (g *Generator) getPackage(pkg string) string {
pkg = fixPackagePathWithVendor(pkg)
if name := g.imports[pkg]; name != "" {
return name
}

for i := 0; ; i++ {
name := fixPackageName(path.Base(pkg))
if i > 0 {
name += strconv.Itoa(i)
}

var exist bool
for _, imp := range g.imports {
if imp == name {
exist = true
break
}
}

if !exist {
g.imports[pkg] = name
return name
}
}
}

// fixes vendor paths
func fixPackagePathWithVendor(pkg string) string {
const vendor = "/vendor/"
if i := strings.LastIndex(pkg, vendor); i != -1 {
return pkg[i+len(vendor):]
}
return pkg
}

func fixPackageName(name string) string {
name = strings.Replace(
strings.Replace(name, ".", "_", -1),
"-",
"_",
-1,
)

if name[0] == 'v' { // to void conflicting with var names, say v1
name = "_" + name
}
return name
}

// escape a struct field tag string back to source code
func escapeTag(tag reflect.StructTag) string {
t := string(tag)
if strings.ContainsRune(t, '`') {
// there are ` in the string; we can't use ` to enclose the string
return strconv.Quote(t)
}
return "`" + t + "`"
}

func (g *Generator) genGetter(receiver string, method string, field reflect.StructField, isRef bool) {
fmt.Fprintf(&g.out, "func (instance *%s) %s() %s%s { ", receiver, method, refType(isRef), g.getType(field.Type))
fmt.Fprintf(&g.out, "return %sinstance.%s", refValue(isRef), field.Name)
fmt.Fprintf(&g.out, " }\n")
}

func refType(isRef bool) string {
if isRef {
return "*"
} else {
return ""
}
}

func refValue(isRef bool) string {
if isRef {
return "&"
} else {
return ""
}
}

func (g *Generator) genSetter(receiver string, method string, field reflect.StructField) {
fmt.Fprintf(&g.out, "func (instance *%s) %s(value %s) { ", receiver, method, g.getType(field.Type))
fmt.Fprintf(&g.out, "instance.%s = value", field.Name)
fmt.Fprintf(&g.out, " }\n")
}

func inspectField(field reflect.StructField) (getter string, hasGetter bool, isRef bool, setter string, hasSetter bool) {
tag := field.Tag

// inspect getter
if getterTag, ok := tag.Lookup("getter"); ok {
getterParts := strings.Split(getterTag, ",")
if firstPart := strings.TrimSpace(getterParts[0]); firstPart != "" && firstPart != "-" {
hasGetter = true
if firstPart == "*" {
getter = toCamel(field.Name)
} else {
getter = firstPart
}
if len(getterParts) > 1 {
for _, part := range getterParts[1:] {
switch strings.TrimSpace(part) {
case "ptr", "pointer", "ref", "reference":
isRef = true
}
}
}
}
}

// inspect setter
if setterTag, ok := tag.Lookup("setter"); ok {
setterParts := strings.Split(setterTag, ",")
if firstPart := strings.TrimSpace(setterParts[0]); firstPart != "" && firstPart != "-" {
hasSetter = true
if firstPart == "*" {
setter = "Set" + toCamel(field.Name)
} else {
setter = firstPart
}
}
}

return
}

func inspectProxy(field reflect.StructField) (getterProxyMap map[string]string, setterProxyMap map[string]string) {
tag := field.Tag

inspect := func(proxyMap *map[string]string, tagIdent string) {
if structTag, ok := tag.Lookup(tagIdent); ok {
parts := strings.Split(structTag, ",")
if len(parts) > 1 {
for _, part := range parts[1:] {
part = strings.TrimSpace(part)
if proxy, values, ok := strings.Cut(part, "="); ok && strings.TrimSpace(proxy) == "proxy" {
mappers := strings.Split(values, " ")
cleanMappers := make([]string, 0, len(mappers))
for _, mapper := range mappers {
if mapper != "" {
cleanMappers = append(cleanMappers, mapper)
}
}
if len(cleanMappers) > 0 {
*proxyMap = make(map[string]string)
}
for _, mapper := range cleanMappers {
if k, v, ok := strings.Cut(mapper, ":"); ok {
(*proxyMap)[strings.TrimSpace(k)] = strings.TrimSpace(v)
} else {
mapper = strings.TrimSpace(mapper)
(*proxyMap)[mapper] = strings.TrimPrefix(mapper, "*")
}
}
}
}
}
}
}

inspect(&getterProxyMap, "getter")
inspect(&setterProxyMap, "setter")

return
}

func (g *Generator) genProxyGetter(receiver string, method string, proxy string, field reflect.StructField, isRef bool) {
fmt.Fprintf(&g.out, "func (instance *%s) %s() %s%s { ", receiver, method, refType(isRef), g.getType(field.Type))
fmt.Fprintf(&g.out, "return %sinstance.%s.%s", refValue(isRef), proxy, field.Name)
fmt.Fprintf(&g.out, " }\n")
}

func (g *Generator) genProxySetter(receiver string, method string, proxy string, field reflect.StructField) {
fmt.Fprintf(&g.out, "func (instance *%s) %s(value %s) { ", receiver, method, g.getType(field.Type))
fmt.Fprintf(&g.out, "instance.%s.%s = value", proxy, field.Name)
fmt.Fprintf(&g.out, " }\n")
}

func getMergedFields(t reflect.Type) (merged []reflect.StructField) {
merged = make([]reflect.StructField, 0, t.NumField())
for i := 0; i < t.NumField(); i++ {
f := t.Field(i)
if f.Anonymous {
merged = append(merged, getMergedFields(f.Type)...)
} else {
merged = append(merged, f)
}
}
return merged
}

func implements(t reflect.Type, method string) bool {
// _, ok1 := t.MethodByName(method)
// _, ok2 := reflect.PointerTo(t).MethodByName(method)
// return ok1 || ok2

// always return false to avoid some conflicts
return false
}

// Converts a string to CamelCase
func toCamel(s string) string {
s = strings.TrimSpace(s)
if s == "" {
return s
}

n := strings.Builder{}
n.Grow(len(s))
capNext := true
for i, v := range []byte(s) {
vIsCap := v >= 'A' && v <= 'Z'
vIsLow := v >= 'a' && v <= 'z'
if capNext {
if vIsLow {
v += 'A'
v -= 'a'
}
} else if i == 0 {
if vIsCap {
v += 'a'
v -= 'A'
}
}
if vIsCap || vIsLow {
n.WriteByte(v)
capNext = false
} else if vIsNum := v >= '0' && v <= '9'; vIsNum {
n.WriteByte(v)
capNext = true
} else {
capNext = v == '_' || v == ' ' || v == '-' || v == '.'
}
}
return n.String()
}

{{ if gt (len $.Generics) 0 }}
    type (
    {{ range $type, $value := $.Generics }} {{ $type }} struct{}
    {{ end }}
    )
{{ end }}

func main() {
g := &Generator{
imports: make(map[string]string),
types:   make(map[reflect.Type]bool),
}
g.SetPackage("{{ $.Package.Name }}", "{{ $.Package.Path }}")
g.SetTags("{{ $.Package.Tags }}")
{{ range $index, $type := $.Types }}g.AddType(new(target.{{ $type }}))
{{ end }}

src, err := format.Source(g.Code())
if err != nil {
fmt.Fprintln(os.Stderr, err)
os.Exit(1)
}

if err = os.WriteFile("{{ $.Output }}", src, 0644); err != nil {
fmt.Fprintln(os.Stderr, err)
os.Exit(1)
}
}